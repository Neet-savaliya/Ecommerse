{
    "sourceFile": "controllers/shop.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1712331672894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1712331681362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,8 @@\n     .then(product => {\n       return req.user.addToCart(product);\n     })\n     .then(result => {\n-      console.log(result);\n       res.redirect('/cart');\n     });\n };\n \n"
                },
                {
                    "date": 1712336777983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,13 @@\n         products: products,\n         isAuthenticated: req.session.isLoggedIn\n       });\n     })\n-    .catch(err => console.log(err));\n+    .catch((err) => {\n+      const error = new Error(\"Product not fetched!\");\n+      error.httpStatusCode = 500;\n+      next(err)\n+  });\n };\n \n exports.postCart = (req, res, next) => {\n   const prodId = req.body.productId;\n"
                },
                {
                    "date": 1712336784984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,9 +81,13 @@\n     .removeFromCart(prodId)\n     .then(result => {\n       res.redirect('/cart');\n     })\n-    .catch(err => console.log(err));\n+    .catch((err) => {\n+      const error = new Error(\"Product not fetched!\");\n+      error.httpStatusCode = 500;\n+      next(err)\n+  });\n };\n \n exports.postOrder = (req, res, next) => {\n   req.user\n"
                },
                {
                    "date": 1712336793169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,132 @@\n+const Product = require('../models/product');\n+const Order = require('../models/order');\n+\n+exports.getProducts = (req, res, next) => {\n+  Product.find()\n+    .then(products => {\n+      res.render('shop/product-list', {\n+        prods: products,\n+        pageTitle: 'All Products',\n+        path: '/products',\n+        isAuthenticated: req.session.isLoggedIn\n+      });\n+    })\n+    .catch(err => {\n+      console.log(err);\n+    });\n+};\n+\n+exports.getProduct = (req, res, next) => {\n+  const prodId = req.params.productId;\n+  Product.findById(prodId)\n+    .then(product => {\n+      res.render('shop/product-detail', {\n+        product: product,\n+        pageTitle: product.title,\n+        path: '/products',\n+        isAuthenticated: req.session.isLoggedIn\n+      });\n+    })\n+    .catch(err => console.log(err));\n+};\n+\n+exports.getIndex = (req, res, next) => {\n+  Product.find()\n+    .then(products => {\n+      res.render('shop/index', {\n+        prods: products,\n+        pageTitle: 'Shop',\n+        path: '/',\n+        isAuthenticated: req.session.isLoggedIn\n+      });\n+    })\n+    .catch(err => {\n+      console.log(err);\n+    });\n+};\n+\n+exports.getCart = (req, res, next) => {\n+  req.user\n+    .populate('cart.items.productId')\n+    .then(user => {\n+      const products = user.cart.items;\n+      res.render('shop/cart', {\n+        path: '/cart',\n+        pageTitle: 'Your Cart',\n+        products: products,\n+        isAuthenticated: req.session.isLoggedIn\n+      });\n+    })\n+    .catch((err) => {\n+      const error = new Error(\"Product not fetched!\");\n+      error.httpStatusCode = 500;\n+      next(err)\n+  });\n+};\n+\n+exports.postCart = (req, res, next) => {\n+  const prodId = req.body.productId;\n+  Product.findById(prodId)\n+    .then(product => {\n+      return req.user.addToCart(product);\n+    })\n+    .then(result => {\n+      res.redirect('/cart');\n+    });\n+};\n+\n+exports.postCartDeleteProduct = (req, res, next) => {\n+  const prodId = req.body.productId;\n+  req.user\n+    .removeFromCart(prodId)\n+    .then(result => {\n+      res.redirect('/cart');\n+    })\n+    .catch((err) => {\n+      const error = new Error(\"Product not fetched!\");\n+      error.httpStatusCode = 500;\n+      next(err)\n+  });\n+};\n+\n+exports.postOrder = (req, res, next) => {\n+  req.user\n+    .populate('cart.items.productId')\n+    .then(user => {\n+      const products = user.cart.items.map(i => {\n+        return { quantity: i.quantity, product: { ...i.productId._doc } };\n+      });\n+      const order = new Order({\n+        user: {\n+          email: req.user.email,\n+          userId: req.user\n+        },\n+        products: products\n+      });\n+      return order.save();\n+    })\n+    .then(result => {\n+      return req.user.clearCart();\n+    })\n+    .then(() => {\n+      res.redirect('/orders');\n+    })\n+    .catch((err) => {\n+      const error = new Error(\"Product not fetched!\");\n+      error.httpStatusCode = 500;\n+      next(err)\n+  });\n+};\n+\n+exports.getOrders = (req, res, next) => {\n+  Order.find({ 'user.userId': req.user._id })\n+    .then(orders => {\n+      res.render('shop/orders', {\n+        path: '/orders',\n+        pageTitle: 'Your Orders',\n+        orders: orders,\n+        isAuthenticated: req.session.isLoggedIn\n+      });\n+    })\n+    .catch(err => console.log(err));\n+};\n"
                },
                {
                    "date": 1712336807188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,138 @@\n+const Product = require('../models/product');\n+const Order = require('../models/order');\n+\n+exports.getProducts = (req, res, next) => {\n+  Product.find()\n+    .then(products => {\n+      res.render('shop/product-list', {\n+        prods: products,\n+        pageTitle: 'All Products',\n+        path: '/products',\n+        isAuthenticated: req.session.isLoggedIn\n+      });\n+    })\n+    .catch(err => {\n+      console.log(err);\n+    });\n+};\n+\n+exports.getProduct = (req, res, next) => {\n+  const prodId = req.params.productId;\n+  Product.findById(prodId)\n+    .then(product => {\n+      res.render('shop/product-detail', {\n+        product: product,\n+        pageTitle: product.title,\n+        path: '/products',\n+        isAuthenticated: req.session.isLoggedIn\n+      });\n+    })\n+    .catch(err => console.log(err));\n+};\n+\n+exports.getIndex = (req, res, next) => {\n+  Product.find()\n+    .then(products => {\n+      res.render('shop/index', {\n+        prods: products,\n+        pageTitle: 'Shop',\n+        path: '/',\n+        isAuthenticated: req.session.isLoggedIn\n+      });\n+    })\n+    .catch((err) => {\n+      const error = new Error(\"Product not fetched!\");\n+      error.httpStatusCode = 500;\n+      next(err)\n+  });\n+};\n+\n+exports.getCart = (req, res, next) => {\n+  req.user\n+    .populate('cart.items.productId')\n+    .then(user => {\n+      const products = user.cart.items;\n+      res.render('shop/cart', {\n+        path: '/cart',\n+        pageTitle: 'Your Cart',\n+        products: products,\n+        isAuthenticated: req.session.isLoggedIn\n+      });\n+    })\n+    .catch((err) => {\n+      const error = new Error(\"Product not fetched!\");\n+      error.httpStatusCode = 500;\n+      next(err)\n+  });\n+};\n+\n+exports.postCart = (req, res, next) => {\n+  const prodId = req.body.productId;\n+  Product.findById(prodId)\n+    .then(product => {\n+      return req.user.addToCart(product);\n+    })\n+    .then(result => {\n+      res.redirect('/cart');\n+    });\n+};\n+\n+exports.postCartDeleteProduct = (req, res, next) => {\n+  const prodId = req.body.productId;\n+  req.user\n+    .removeFromCart(prodId)\n+    .then(result => {\n+      res.redirect('/cart');\n+    })\n+    .catch((err) => {\n+      const error = new Error(\"Product not fetched!\");\n+      error.httpStatusCode = 500;\n+      next(err)\n+  });\n+};\n+\n+exports.postOrder = (req, res, next) => {\n+  req.user\n+    .populate('cart.items.productId')\n+    .then(user => {\n+      const products = user.cart.items.map(i => {\n+        return { quantity: i.quantity, product: { ...i.productId._doc } };\n+      });\n+      const order = new Order({\n+        user: {\n+          email: req.user.email,\n+          userId: req.user\n+        },\n+        products: products\n+      });\n+      return order.save();\n+    })\n+    .then(result => {\n+      return req.user.clearCart();\n+    })\n+    .then(() => {\n+      res.redirect('/orders');\n+    })\n+    .catch((err) => {\n+      const error = new Error(\"Product not fetched!\");\n+      error.httpStatusCode = 500;\n+      next(err)\n+  });\n+};\n+\n+exports.getOrders = (req, res, next) => {\n+  Order.find({ 'user.userId': req.user._id })\n+    .then(orders => {\n+      res.render('shop/orders', {\n+        path: '/orders',\n+        pageTitle: 'Your Orders',\n+        orders: orders,\n+        isAuthenticated: req.session.isLoggedIn\n+      });\n+    })\n+    .catch((err) => {\n+      const error = new Error(\"Product not fetched!\");\n+      error.httpStatusCode = 500;\n+      next(err)\n+  });\n+};\n"
                },
                {
                    "date": 1712336814321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,142 @@\n+const Product = require('../models/product');\n+const Order = require('../models/order');\n+\n+exports.getProducts = (req, res, next) => {\n+  Product.find()\n+    .then(products => {\n+      res.render('shop/product-list', {\n+        prods: products,\n+        pageTitle: 'All Products',\n+        path: '/products',\n+        isAuthenticated: req.session.isLoggedIn\n+      });\n+    })\n+    .catch(err => {\n+      console.log(err);\n+    });\n+};\n+\n+exports.getProduct = (req, res, next) => {\n+  const prodId = req.params.productId;\n+  Product.findById(prodId)\n+    .then(product => {\n+      res.render('shop/product-detail', {\n+        product: product,\n+        pageTitle: product.title,\n+        path: '/products',\n+        isAuthenticated: req.session.isLoggedIn\n+      });\n+    })\n+    .catch((err) => {\n+      const error = new Error(\"Product not fetched!\");\n+      error.httpStatusCode = 500;\n+      next(err)\n+  });\n+};\n+\n+exports.getIndex = (req, res, next) => {\n+  Product.find()\n+    .then(products => {\n+      res.render('shop/index', {\n+        prods: products,\n+        pageTitle: 'Shop',\n+        path: '/',\n+        isAuthenticated: req.session.isLoggedIn\n+      });\n+    })\n+    .catch((err) => {\n+      const error = new Error(\"Product not fetched!\");\n+      error.httpStatusCode = 500;\n+      next(err)\n+  });\n+};\n+\n+exports.getCart = (req, res, next) => {\n+  req.user\n+    .populate('cart.items.productId')\n+    .then(user => {\n+      const products = user.cart.items;\n+      res.render('shop/cart', {\n+        path: '/cart',\n+        pageTitle: 'Your Cart',\n+        products: products,\n+        isAuthenticated: req.session.isLoggedIn\n+      });\n+    })\n+    .catch((err) => {\n+      const error = new Error(\"Product not fetched!\");\n+      error.httpStatusCode = 500;\n+      next(err)\n+  });\n+};\n+\n+exports.postCart = (req, res, next) => {\n+  const prodId = req.body.productId;\n+  Product.findById(prodId)\n+    .then(product => {\n+      return req.user.addToCart(product);\n+    })\n+    .then(result => {\n+      res.redirect('/cart');\n+    });\n+};\n+\n+exports.postCartDeleteProduct = (req, res, next) => {\n+  const prodId = req.body.productId;\n+  req.user\n+    .removeFromCart(prodId)\n+    .then(result => {\n+      res.redirect('/cart');\n+    })\n+    .catch((err) => {\n+      const error = new Error(\"Product not fetched!\");\n+      error.httpStatusCode = 500;\n+      next(err)\n+  });\n+};\n+\n+exports.postOrder = (req, res, next) => {\n+  req.user\n+    .populate('cart.items.productId')\n+    .then(user => {\n+      const products = user.cart.items.map(i => {\n+        return { quantity: i.quantity, product: { ...i.productId._doc } };\n+      });\n+      const order = new Order({\n+        user: {\n+          email: req.user.email,\n+          userId: req.user\n+        },\n+        products: products\n+      });\n+      return order.save();\n+    })\n+    .then(result => {\n+      return req.user.clearCart();\n+    })\n+    .then(() => {\n+      res.redirect('/orders');\n+    })\n+    .catch((err) => {\n+      const error = new Error(\"Product not fetched!\");\n+      error.httpStatusCode = 500;\n+      next(err)\n+  });\n+};\n+\n+exports.getOrders = (req, res, next) => {\n+  Order.find({ 'user.userId': req.user._id })\n+    .then(orders => {\n+      res.render('shop/orders', {\n+        path: '/orders',\n+        pageTitle: 'Your Orders',\n+        orders: orders,\n+        isAuthenticated: req.session.isLoggedIn\n+      });\n+    })\n+    .catch((err) => {\n+      const error = new Error(\"Product not fetched!\");\n+      error.httpStatusCode = 500;\n+      next(err)\n+  });\n+};\n"
                }
            ],
            "date": 1712331672894,
            "name": "Commit-0",
            "content": "const Product = require('../models/product');\nconst Order = require('../models/order');\n\nexports.getProducts = (req, res, next) => {\n  Product.find()\n    .then(products => {\n      res.render('shop/product-list', {\n        prods: products,\n        pageTitle: 'All Products',\n        path: '/products',\n        isAuthenticated: req.session.isLoggedIn\n      });\n    })\n    .catch(err => {\n      console.log(err);\n    });\n};\n\nexports.getProduct = (req, res, next) => {\n  const prodId = req.params.productId;\n  Product.findById(prodId)\n    .then(product => {\n      res.render('shop/product-detail', {\n        product: product,\n        pageTitle: product.title,\n        path: '/products',\n        isAuthenticated: req.session.isLoggedIn\n      });\n    })\n    .catch(err => console.log(err));\n};\n\nexports.getIndex = (req, res, next) => {\n  Product.find()\n    .then(products => {\n      res.render('shop/index', {\n        prods: products,\n        pageTitle: 'Shop',\n        path: '/',\n        isAuthenticated: req.session.isLoggedIn\n      });\n    })\n    .catch(err => {\n      console.log(err);\n    });\n};\n\nexports.getCart = (req, res, next) => {\n  req.user\n    .populate('cart.items.productId')\n    .then(user => {\n      const products = user.cart.items;\n      res.render('shop/cart', {\n        path: '/cart',\n        pageTitle: 'Your Cart',\n        products: products,\n        isAuthenticated: req.session.isLoggedIn\n      });\n    })\n    .catch(err => console.log(err));\n};\n\nexports.postCart = (req, res, next) => {\n  const prodId = req.body.productId;\n  Product.findById(prodId)\n    .then(product => {\n      return req.user.addToCart(product);\n    })\n    .then(result => {\n      console.log(result);\n      res.redirect('/cart');\n    });\n};\n\nexports.postCartDeleteProduct = (req, res, next) => {\n  const prodId = req.body.productId;\n  req.user\n    .removeFromCart(prodId)\n    .then(result => {\n      res.redirect('/cart');\n    })\n    .catch(err => console.log(err));\n};\n\nexports.postOrder = (req, res, next) => {\n  req.user\n    .populate('cart.items.productId')\n    .then(user => {\n      const products = user.cart.items.map(i => {\n        return { quantity: i.quantity, product: { ...i.productId._doc } };\n      });\n      const order = new Order({\n        user: {\n          email: req.user.email,\n          userId: req.user\n        },\n        products: products\n      });\n      return order.save();\n    })\n    .then(result => {\n      return req.user.clearCart();\n    })\n    .then(() => {\n      res.redirect('/orders');\n    })\n    .catch(err => console.log(err));\n};\n\nexports.getOrders = (req, res, next) => {\n  Order.find({ 'user.userId': req.user._id })\n    .then(orders => {\n      res.render('shop/orders', {\n        path: '/orders',\n        pageTitle: 'Your Orders',\n        orders: orders,\n        isAuthenticated: req.session.isLoggedIn\n      });\n    })\n    .catch(err => console.log(err));\n};\n"
        }
    ]
}