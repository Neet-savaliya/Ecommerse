{
    "sourceFile": "controllers/auth.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1712143853259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1712143858847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,225 @@\n+const crypto = require(\"crypto\");\n+const bcrypt = require(\"bcryptjs\");\n+const nodemailer = require(\"nodemailer\");\n+\n+const User = require(\"../models/user\");\n+\n+const transporter = nodemailer.createTransport({\n+    host: \"smtp.ethereal.email\",\n+    port: 587,\n+    auth: {\n+        user: \"catharine.bergstrom30@ethereal.email\",\n+        pass: \"uq5sSjK1JVd4qvceuX\",\n+    },\n+});\n+\n+exports.getLogin = (req, res, next) => {\n+    let message = req.flash(\"error\");\n+    if (message.length > 0) {\n+        message = message[0];\n+    } else {\n+        message = null;\n+    }\n+    res.render(\"auth/login\", {\n+        path: \"/login\",\n+        pageTitle: \"Login\",\n+        errorMsg: message,\n+    });\n+};\n+\n+exports.getSignup = (req, res, next) => {\n+    let message = req.flash(\"passNotMatchErr\");\n+    if (message.length > 0) {\n+        message = message[0];\n+    } else {\n+        message = null;\n+    }\n+    res.render(\"auth/signup\", {\n+        path: \"/signup\",\n+        pageTitle: \"Signup\",\n+        errorMsg: message,\n+    });\n+};\n+\n+exports.getReset = (req, res, next) => {\n+    let message = req.flash(\"error\");\n+    if (message.length > 0) {\n+        message = message[0];\n+    } else {\n+        message = null;\n+    }\n+    res.render(\"auth/reset\", {\n+        path: \"/reset\",\n+        pageTitle: \"Reset Password\",\n+        errorMsg: message,\n+    });\n+};\n+\n+exports.getResetPassword = (req, res, next) => {\n+    const token = req.params.token;\n+    User.findOne({ token: token, tokenEXP: { $gt: Date.now() } })\n+        .then((user) => {\n+            if (user) {\n+                let message = req.flash(\"error\");\n+                if (message.length > 0) {\n+                    message = message[0];\n+                } else {\n+                    message = null;\n+                }\n+                res.render(\"auth/new-password\", {\n+                    path: \"/new-password\",\n+                    pageTitle: \"Reset Password\",\n+                    errorMsg: message,\n+                    userId: user._id.toString(),\n+                });\n+            }\n+        })\n+        .catch((err) => console.log(err));\n+};\n+\n+exports.postLogin = (req, res, next) => {\n+    const email = req.body.email;\n+    const password = req.body.password;\n+    User.findOne({ email: email })\n+        .then((user) => {\n+            if (user) {\n+                bcrypt\n+                    .compare(password, user.password)\n+                    .then((doMatch) => {\n+                        if (!doMatch) {\n+                            req.flash(\"error\", \"Enter valid password\");\n+                            return res.redirect(\"/login\");\n+                        }\n+                        req.session.isLoggedIn = true;\n+                        req.session.user = user;\n+                        return req.session.save((err) => {\n+                            console.log(err);\n+                            res.redirect(\"/\");\n+                        });\n+                    })\n+                    .catch((err) => console.log(err));\n+            } else {\n+                req.flash(\"error\", \"Enter valid email\");\n+                res.redirect(\"/login\");\n+            }\n+        })\n+        .catch((err) => console.log(err));\n+};\n+\n+exports.postSignup = (req, res, next) => {\n+    const email = req.body.email;\n+    const password = req.body.password;\n+    const confirmPassword = req.body.confirmPassword;\n+\n+    const error = req.body\n+    transporter\n+        .sendMail({\n+            from: '\"Code marshals\" <davin32@ethereal.email>', // sender address\n+            to: email, // list of receivers\n+            subject: \"Testing mail\", // Subject line\n+            text: \"This is first mail\", // plain text body\n+            html: \"<b>Please consider mail</b>\", // html body\n+        })\n+        .then((data) => {\n+            console.log(\"email sending data\", data.messageId);\n+        })\n+        .catch((err) => console.log(err));\n+\n+    if (password === confirmPassword) {\n+        User.findOne({ email: email })\n+            .then((data) => {\n+                if (data) {\n+                    req.flash(\"error\", \"User already exist.\");\n+                    return res.redirect(\"/login\");\n+                }\n+                return bcrypt\n+                    .hash(password, 12)\n+                    .then((bcryptPassword) => {\n+                        const user = new User({\n+                            email: email,\n+                            password: bcryptPassword,\n+                            cart: { items: [] },\n+                        });\n+                        return user.save();\n+                    })\n+                    .then((data) => {\n+                        res.redirect(\"/login\");\n+                    });\n+            })\n+            .catch((err) => console.log(err));\n+    } else {\n+        req.flash(\"passNotMatchErr\", \"Both password should be same.\");\n+        res.redirect(\"/signup\");\n+    }\n+};\n+\n+exports.postLogout = (req, res, next) => {\n+    req.session.destroy((err) => {\n+        console.log(err);\n+        res.redirect(\"/\");\n+    });\n+};\n+\n+exports.postReset = (req, res, next) => {\n+    crypto.randomBytes(32, (err, buff) => {\n+        if (err) {\n+            console.log(err);\n+            req.flash(\"error\", \"Please try after some ime\");\n+            res.redirect(\"/reset\");\n+        }\n+        const token = buff.toString(\"hex\");\n+\n+        User.findOne({ email: req.body.email })\n+            .then((user) => {\n+                if (!user) {\n+                    req.flash(\"error\", \"This user does not Exist.\");\n+                    return res.redirect(\"/reset\");\n+                }\n+\n+                user.token = token;\n+                user.tokenEXP = Date.now() + 3600000;\n+\n+                return user.save();\n+            })\n+            .then((result) => {\n+                res.redirect(\"/\");\n+                return transporter.sendMail({\n+                    from: '\"Code marshals\" <davin32@ethereal.email>', // sender address\n+                    to: req.body.email, // list of receivers\n+                    subject: \"Reset password\", // Subject line\n+                    text: \"This mail helps you to reset password securely\", // plain text body\n+                    html: `\n+            <p>Click on below link to reset your password</p>\n+            <a href= \"localhost:3000/reset/${token}\">Click</a>\n+            `, // html body\n+                });\n+            })\n+            .then((data) => {\n+                console.log(\"email sending data\", data.messageId);\n+            })\n+            .catch((err) => console.log(err));\n+    });\n+};\n+\n+exports.postResetPassword = (req, res, next) => {\n+    if (req.body.password === req.body.confirmPassword) {\n+        bcrypt\n+            .hash(req.body.password, 12)\n+            .then((bcryptPassword) => {\n+                return User.findById(req.body.userId).then((user) => {\n+                    user.password = bcryptPassword;\n+                    user.token = undefined\n+                    user.tokenEXP = undefined\n+                    return user.save();\n+                });\n+            })\n+            .then((result) => {\n+                req.flash(\"errorMsg\", \"Password changed\");\n+                res.redirect(\"/login\");\n+            })\n+            .catch((err) => console.log(err));\n+    } else {\n+        req.flash(\"passNotMatchErr\", \"Both password must be same.\");\n+        res.redirect(\"/reset/:token\");\n+    }\n+};\n"
                },
                {
                    "date": 1712143873677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,225 @@\n+const crypto = require(\"crypto\");\n+const bcrypt = require(\"bcryptjs\");\n+const nodemailer = require(\"nodemailer\");\n+\n+const User = require(\"../models/user\");\n+\n+const transporter = nodemailer.createTransport({\n+    host: \"smtp.ethereal.email\",\n+    port: 587,\n+    auth: {\n+        user: \"catharine.bergstrom30@ethereal.email\",\n+        pass: \"uq5sSjK1JVd4qvceuX\",\n+    },\n+});\n+\n+exports.getLogin = (req, res, next) => {\n+    let message = req.flash(\"error\");\n+    if (message.length > 0) {\n+        message = message[0];\n+    } else {\n+        message = null;\n+    }\n+    res.render(\"auth/login\", {\n+        path: \"/login\",\n+        pageTitle: \"Login\",\n+        errorMsg: message,\n+    });\n+};\n+\n+exports.getSignup = (req, res, next) => {\n+    let message = req.flash(\"passNotMatchErr\");\n+    if (message.length > 0) {\n+        message = message[0];\n+    } else {\n+        message = null;\n+    }\n+    res.render(\"auth/signup\", {\n+        path: \"/signup\",\n+        pageTitle: \"Signup\",\n+        errorMsg: message,\n+    });\n+};\n+\n+exports.getReset = (req, res, next) => {\n+    let message = req.flash(\"error\");\n+    if (message.length > 0) {\n+        message = message[0];\n+    } else {\n+        message = null;\n+    }\n+    res.render(\"auth/reset\", {\n+        path: \"/reset\",\n+        pageTitle: \"Reset Password\",\n+        errorMsg: message,\n+    });\n+};\n+\n+exports.getResetPassword = (req, res, next) => {\n+    const token = req.params.token;\n+    User.findOne({ token: token, tokenEXP: { $gt: Date.now() } })\n+        .then((user) => {\n+            if (user) {\n+                let message = req.flash(\"error\");\n+                if (message.length > 0) {\n+                    message = message[0];\n+                } else {\n+                    message = null;\n+                }\n+                res.render(\"auth/new-password\", {\n+                    path: \"/new-password\",\n+                    pageTitle: \"Reset Password\",\n+                    errorMsg: message,\n+                    userId: user._id.toString(),\n+                });\n+            }\n+        })\n+        .catch((err) => console.log(err));\n+};\n+\n+exports.postLogin = (req, res, next) => {\n+    const email = req.body.email;\n+    const password = req.body.password;\n+    User.findOne({ email: email })\n+        .then((user) => {\n+            if (user) {\n+                bcrypt\n+                    .compare(password, user.password)\n+                    .then((doMatch) => {\n+                        if (!doMatch) {\n+                            req.flash(\"error\", \"Enter valid password\");\n+                            return res.redirect(\"/login\");\n+                        }\n+                        req.session.isLoggedIn = true;\n+                        req.session.user = user;\n+                        return req.session.save((err) => {\n+                            console.log(err);\n+                            res.redirect(\"/\");\n+                        });\n+                    })\n+                    .catch((err) => console.log(err));\n+            } else {\n+                req.flash(\"error\", \"Enter valid email\");\n+                res.redirect(\"/login\");\n+            }\n+        })\n+        .catch((err) => console.log(err));\n+};\n+\n+exports.postSignup = (req, res, next) => {\n+    const email = req.body.email;\n+    const password = req.body.password;\n+    const confirmPassword = req.body.confirmPassword;\n+\n+    const error = vali\n+    transporter\n+        .sendMail({\n+            from: '\"Code marshals\" <davin32@ethereal.email>', // sender address\n+            to: email, // list of receivers\n+            subject: \"Testing mail\", // Subject line\n+            text: \"This is first mail\", // plain text body\n+            html: \"<b>Please consider mail</b>\", // html body\n+        })\n+        .then((data) => {\n+            console.log(\"email sending data\", data.messageId);\n+        })\n+        .catch((err) => console.log(err));\n+\n+    if (password === confirmPassword) {\n+        User.findOne({ email: email })\n+            .then((data) => {\n+                if (data) {\n+                    req.flash(\"error\", \"User already exist.\");\n+                    return res.redirect(\"/login\");\n+                }\n+                return bcrypt\n+                    .hash(password, 12)\n+                    .then((bcryptPassword) => {\n+                        const user = new User({\n+                            email: email,\n+                            password: bcryptPassword,\n+                            cart: { items: [] },\n+                        });\n+                        return user.save();\n+                    })\n+                    .then((data) => {\n+                        res.redirect(\"/login\");\n+                    });\n+            })\n+            .catch((err) => console.log(err));\n+    } else {\n+        req.flash(\"passNotMatchErr\", \"Both password should be same.\");\n+        res.redirect(\"/signup\");\n+    }\n+};\n+\n+exports.postLogout = (req, res, next) => {\n+    req.session.destroy((err) => {\n+        console.log(err);\n+        res.redirect(\"/\");\n+    });\n+};\n+\n+exports.postReset = (req, res, next) => {\n+    crypto.randomBytes(32, (err, buff) => {\n+        if (err) {\n+            console.log(err);\n+            req.flash(\"error\", \"Please try after some ime\");\n+            res.redirect(\"/reset\");\n+        }\n+        const token = buff.toString(\"hex\");\n+\n+        User.findOne({ email: req.body.email })\n+            .then((user) => {\n+                if (!user) {\n+                    req.flash(\"error\", \"This user does not Exist.\");\n+                    return res.redirect(\"/reset\");\n+                }\n+\n+                user.token = token;\n+                user.tokenEXP = Date.now() + 3600000;\n+\n+                return user.save();\n+            })\n+            .then((result) => {\n+                res.redirect(\"/\");\n+                return transporter.sendMail({\n+                    from: '\"Code marshals\" <davin32@ethereal.email>', // sender address\n+                    to: req.body.email, // list of receivers\n+                    subject: \"Reset password\", // Subject line\n+                    text: \"This mail helps you to reset password securely\", // plain text body\n+                    html: `\n+            <p>Click on below link to reset your password</p>\n+            <a href= \"localhost:3000/reset/${token}\">Click</a>\n+            `, // html body\n+                });\n+            })\n+            .then((data) => {\n+                console.log(\"email sending data\", data.messageId);\n+            })\n+            .catch((err) => console.log(err));\n+    });\n+};\n+\n+exports.postResetPassword = (req, res, next) => {\n+    if (req.body.password === req.body.confirmPassword) {\n+        bcrypt\n+            .hash(req.body.password, 12)\n+            .then((bcryptPassword) => {\n+                return User.findById(req.body.userId).then((user) => {\n+                    user.password = bcryptPassword;\n+                    user.token = undefined\n+                    user.tokenEXP = undefined\n+                    return user.save();\n+                });\n+            })\n+            .then((result) => {\n+                req.flash(\"errorMsg\", \"Password changed\");\n+                res.redirect(\"/login\");\n+            })\n+            .catch((err) => console.log(err));\n+    } else {\n+        req.flash(\"passNotMatchErr\", \"Both password must be same.\");\n+        res.redirect(\"/reset/:token\");\n+    }\n+};\n"
                },
                {
                    "date": 1712143889755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,225 @@\n+const crypto = require(\"crypto\");\n+const bcrypt = require(\"bcryptjs\");\n+const nodemailer = require(\"nodemailer\");\n+\n+const User = require(\"../models/user\");\n+\n+const transporter = nodemailer.createTransport({\n+    host: \"smtp.ethereal.email\",\n+    port: 587,\n+    auth: {\n+        user: \"catharine.bergstrom30@ethereal.email\",\n+        pass: \"uq5sSjK1JVd4qvceuX\",\n+    },\n+});\n+\n+exports.getLogin = (req, res, next) => {\n+    let message = req.flash(\"error\");\n+    if (message.length > 0) {\n+        message = message[0];\n+    } else {\n+        message = null;\n+    }\n+    res.render(\"auth/login\", {\n+        path: \"/login\",\n+        pageTitle: \"Login\",\n+        errorMsg: message,\n+    });\n+};\n+\n+exports.getSignup = (req, res, next) => {\n+    let message = req.flash(\"passNotMatchErr\");\n+    if (message.length > 0) {\n+        message = message[0];\n+    } else {\n+        message = null;\n+    }\n+    res.render(\"auth/signup\", {\n+        path: \"/signup\",\n+        pageTitle: \"Signup\",\n+        errorMsg: message,\n+    });\n+};\n+\n+exports.getReset = (req, res, next) => {\n+    let message = req.flash(\"error\");\n+    if (message.length > 0) {\n+        message = message[0];\n+    } else {\n+        message = null;\n+    }\n+    res.render(\"auth/reset\", {\n+        path: \"/reset\",\n+        pageTitle: \"Reset Password\",\n+        errorMsg: message,\n+    });\n+};\n+\n+exports.getResetPassword = (req, res, next) => {\n+    const token = req.params.token;\n+    User.findOne({ token: token, tokenEXP: { $gt: Date.now() } })\n+        .then((user) => {\n+            if (user) {\n+                let message = req.flash(\"error\");\n+                if (message.length > 0) {\n+                    message = message[0];\n+                } else {\n+                    message = null;\n+                }\n+                res.render(\"auth/new-password\", {\n+                    path: \"/new-password\",\n+                    pageTitle: \"Reset Password\",\n+                    errorMsg: message,\n+                    userId: user._id.toString(),\n+                });\n+            }\n+        })\n+        .catch((err) => console.log(err));\n+};\n+\n+exports.postLogin = (req, res, next) => {\n+    const email = req.body.email;\n+    const password = req.body.password;\n+    User.findOne({ email: email })\n+        .then((user) => {\n+            if (user) {\n+                bcrypt\n+                    .compare(password, user.password)\n+                    .then((doMatch) => {\n+                        if (!doMatch) {\n+                            req.flash(\"error\", \"Enter valid password\");\n+                            return res.redirect(\"/login\");\n+                        }\n+                        req.session.isLoggedIn = true;\n+                        req.session.user = user;\n+                        return req.session.save((err) => {\n+                            console.log(err);\n+                            res.redirect(\"/\");\n+                        });\n+                    })\n+                    .catch((err) => console.log(err));\n+            } else {\n+                req.flash(\"error\", \"Enter valid email\");\n+                res.redirect(\"/login\");\n+            }\n+        })\n+        .catch((err) => console.log(err));\n+};\n+\n+exports.postSignup = (req, res, next) => {\n+    const email = req.body.email;\n+    const password = req.body.password;\n+    const confirmPassword = req.body.confirmPassword;\n+\n+    const error = validat\n+    transporter\n+        .sendMail({\n+            from: '\"Code marshals\" <davin32@ethereal.email>', // sender address\n+            to: email, // list of receivers\n+            subject: \"Testing mail\", // Subject line\n+            text: \"This is first mail\", // plain text body\n+            html: \"<b>Please consider mail</b>\", // html body\n+        })\n+        .then((data) => {\n+            console.log(\"email sending data\", data.messageId);\n+        })\n+        .catch((err) => console.log(err));\n+\n+    if (password === confirmPassword) {\n+        User.findOne({ email: email })\n+            .then((data) => {\n+                if (data) {\n+                    req.flash(\"error\", \"User already exist.\");\n+                    return res.redirect(\"/login\");\n+                }\n+                return bcrypt\n+                    .hash(password, 12)\n+                    .then((bcryptPassword) => {\n+                        const user = new User({\n+                            email: email,\n+                            password: bcryptPassword,\n+                            cart: { items: [] },\n+                        });\n+                        return user.save();\n+                    })\n+                    .then((data) => {\n+                        res.redirect(\"/login\");\n+                    });\n+            })\n+            .catch((err) => console.log(err));\n+    } else {\n+        req.flash(\"passNotMatchErr\", \"Both password should be same.\");\n+        res.redirect(\"/signup\");\n+    }\n+};\n+\n+exports.postLogout = (req, res, next) => {\n+    req.session.destroy((err) => {\n+        console.log(err);\n+        res.redirect(\"/\");\n+    });\n+};\n+\n+exports.postReset = (req, res, next) => {\n+    crypto.randomBytes(32, (err, buff) => {\n+        if (err) {\n+            console.log(err);\n+            req.flash(\"error\", \"Please try after some ime\");\n+            res.redirect(\"/reset\");\n+        }\n+        const token = buff.toString(\"hex\");\n+\n+        User.findOne({ email: req.body.email })\n+            .then((user) => {\n+                if (!user) {\n+                    req.flash(\"error\", \"This user does not Exist.\");\n+                    return res.redirect(\"/reset\");\n+                }\n+\n+                user.token = token;\n+                user.tokenEXP = Date.now() + 3600000;\n+\n+                return user.save();\n+            })\n+            .then((result) => {\n+                res.redirect(\"/\");\n+                return transporter.sendMail({\n+                    from: '\"Code marshals\" <davin32@ethereal.email>', // sender address\n+                    to: req.body.email, // list of receivers\n+                    subject: \"Reset password\", // Subject line\n+                    text: \"This mail helps you to reset password securely\", // plain text body\n+                    html: `\n+            <p>Click on below link to reset your password</p>\n+            <a href= \"localhost:3000/reset/${token}\">Click</a>\n+            `, // html body\n+                });\n+            })\n+            .then((data) => {\n+                console.log(\"email sending data\", data.messageId);\n+            })\n+            .catch((err) => console.log(err));\n+    });\n+};\n+\n+exports.postResetPassword = (req, res, next) => {\n+    if (req.body.password === req.body.confirmPassword) {\n+        bcrypt\n+            .hash(req.body.password, 12)\n+            .then((bcryptPassword) => {\n+                return User.findById(req.body.userId).then((user) => {\n+                    user.password = bcryptPassword;\n+                    user.token = undefined\n+                    user.tokenEXP = undefined\n+                    return user.save();\n+                });\n+            })\n+            .then((result) => {\n+                req.flash(\"errorMsg\", \"Password changed\");\n+                res.redirect(\"/login\");\n+            })\n+            .catch((err) => console.log(err));\n+    } else {\n+        req.flash(\"passNotMatchErr\", \"Both password must be same.\");\n+        res.redirect(\"/reset/:token\");\n+    }\n+};\n"
                },
                {
                    "date": 1712143895419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,225 @@\n+const crypto = require(\"crypto\");\n+const bcrypt = require(\"bcryptjs\");\n+const nodemailer = require(\"nodemailer\");\n+\n+const User = require(\"../models/user\");\n+\n+const transporter = nodemailer.createTransport({\n+    host: \"smtp.ethereal.email\",\n+    port: 587,\n+    auth: {\n+        user: \"catharine.bergstrom30@ethereal.email\",\n+        pass: \"uq5sSjK1JVd4qvceuX\",\n+    },\n+});\n+\n+exports.getLogin = (req, res, next) => {\n+    let message = req.flash(\"error\");\n+    if (message.length > 0) {\n+        message = message[0];\n+    } else {\n+        message = null;\n+    }\n+    res.render(\"auth/login\", {\n+        path: \"/login\",\n+        pageTitle: \"Login\",\n+        errorMsg: message,\n+    });\n+};\n+\n+exports.getSignup = (req, res, next) => {\n+    let message = req.flash(\"passNotMatchErr\");\n+    if (message.length > 0) {\n+        message = message[0];\n+    } else {\n+        message = null;\n+    }\n+    res.render(\"auth/signup\", {\n+        path: \"/signup\",\n+        pageTitle: \"Signup\",\n+        errorMsg: message,\n+    });\n+};\n+\n+exports.getReset = (req, res, next) => {\n+    let message = req.flash(\"error\");\n+    if (message.length > 0) {\n+        message = message[0];\n+    } else {\n+        message = null;\n+    }\n+    res.render(\"auth/reset\", {\n+        path: \"/reset\",\n+        pageTitle: \"Reset Password\",\n+        errorMsg: message,\n+    });\n+};\n+\n+exports.getResetPassword = (req, res, next) => {\n+    const token = req.params.token;\n+    User.findOne({ token: token, tokenEXP: { $gt: Date.now() } })\n+        .then((user) => {\n+            if (user) {\n+                let message = req.flash(\"error\");\n+                if (message.length > 0) {\n+                    message = message[0];\n+                } else {\n+                    message = null;\n+                }\n+                res.render(\"auth/new-password\", {\n+                    path: \"/new-password\",\n+                    pageTitle: \"Reset Password\",\n+                    errorMsg: message,\n+                    userId: user._id.toString(),\n+                });\n+            }\n+        })\n+        .catch((err) => console.log(err));\n+};\n+\n+exports.postLogin = (req, res, next) => {\n+    const email = req.body.email;\n+    const password = req.body.password;\n+    User.findOne({ email: email })\n+        .then((user) => {\n+            if (user) {\n+                bcrypt\n+                    .compare(password, user.password)\n+                    .then((doMatch) => {\n+                        if (!doMatch) {\n+                            req.flash(\"error\", \"Enter valid password\");\n+                            return res.redirect(\"/login\");\n+                        }\n+                        req.session.isLoggedIn = true;\n+                        req.session.user = user;\n+                        return req.session.save((err) => {\n+                            console.log(err);\n+                            res.redirect(\"/\");\n+                        });\n+                    })\n+                    .catch((err) => console.log(err));\n+            } else {\n+                req.flash(\"error\", \"Enter valid email\");\n+                res.redirect(\"/login\");\n+            }\n+        })\n+        .catch((err) => console.log(err));\n+};\n+\n+exports.postSignup = (req, res, next) => {\n+    const email = req.body.email;\n+    const password = req.body.password;\n+    const confirmPassword = req.body.confirmPassword;\n+\n+    const error = validatiionResult()\n+    transporter\n+        .sendMail({\n+            from: '\"Code marshals\" <davin32@ethereal.email>', // sender address\n+            to: email, // list of receivers\n+            subject: \"Testing mail\", // Subject line\n+            text: \"This is first mail\", // plain text body\n+            html: \"<b>Please consider mail</b>\", // html body\n+        })\n+        .then((data) => {\n+            console.log(\"email sending data\", data.messageId);\n+        })\n+        .catch((err) => console.log(err));\n+\n+    if (password === confirmPassword) {\n+        User.findOne({ email: email })\n+            .then((data) => {\n+                if (data) {\n+                    req.flash(\"error\", \"User already exist.\");\n+                    return res.redirect(\"/login\");\n+                }\n+                return bcrypt\n+                    .hash(password, 12)\n+                    .then((bcryptPassword) => {\n+                        const user = new User({\n+                            email: email,\n+                            password: bcryptPassword,\n+                            cart: { items: [] },\n+                        });\n+                        return user.save();\n+                    })\n+                    .then((data) => {\n+                        res.redirect(\"/login\");\n+                    });\n+            })\n+            .catch((err) => console.log(err));\n+    } else {\n+        req.flash(\"passNotMatchErr\", \"Both password should be same.\");\n+        res.redirect(\"/signup\");\n+    }\n+};\n+\n+exports.postLogout = (req, res, next) => {\n+    req.session.destroy((err) => {\n+        console.log(err);\n+        res.redirect(\"/\");\n+    });\n+};\n+\n+exports.postReset = (req, res, next) => {\n+    crypto.randomBytes(32, (err, buff) => {\n+        if (err) {\n+            console.log(err);\n+            req.flash(\"error\", \"Please try after some ime\");\n+            res.redirect(\"/reset\");\n+        }\n+        const token = buff.toString(\"hex\");\n+\n+        User.findOne({ email: req.body.email })\n+            .then((user) => {\n+                if (!user) {\n+                    req.flash(\"error\", \"This user does not Exist.\");\n+                    return res.redirect(\"/reset\");\n+                }\n+\n+                user.token = token;\n+                user.tokenEXP = Date.now() + 3600000;\n+\n+                return user.save();\n+            })\n+            .then((result) => {\n+                res.redirect(\"/\");\n+                return transporter.sendMail({\n+                    from: '\"Code marshals\" <davin32@ethereal.email>', // sender address\n+                    to: req.body.email, // list of receivers\n+                    subject: \"Reset password\", // Subject line\n+                    text: \"This mail helps you to reset password securely\", // plain text body\n+                    html: `\n+            <p>Click on below link to reset your password</p>\n+            <a href= \"localhost:3000/reset/${token}\">Click</a>\n+            `, // html body\n+                });\n+            })\n+            .then((data) => {\n+                console.log(\"email sending data\", data.messageId);\n+            })\n+            .catch((err) => console.log(err));\n+    });\n+};\n+\n+exports.postResetPassword = (req, res, next) => {\n+    if (req.body.password === req.body.confirmPassword) {\n+        bcrypt\n+            .hash(req.body.password, 12)\n+            .then((bcryptPassword) => {\n+                return User.findById(req.body.userId).then((user) => {\n+                    user.password = bcryptPassword;\n+                    user.token = undefined\n+                    user.tokenEXP = undefined\n+                    return user.save();\n+                });\n+            })\n+            .then((result) => {\n+                req.flash(\"errorMsg\", \"Password changed\");\n+                res.redirect(\"/login\");\n+            })\n+            .catch((err) => console.log(err));\n+    } else {\n+        req.flash(\"passNotMatchErr\", \"Both password must be same.\");\n+        res.redirect(\"/reset/:token\");\n+    }\n+};\n"
                },
                {
                    "date": 1712143901417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,225 @@\n+const crypto = require(\"crypto\");\n+const bcrypt = require(\"bcryptjs\");\n+const nodemailer = require(\"nodemailer\");\n+\n+const User = require(\"../models/user\");\n+\n+const transporter = nodemailer.createTransport({\n+    host: \"smtp.ethereal.email\",\n+    port: 587,\n+    auth: {\n+        user: \"catharine.bergstrom30@ethereal.email\",\n+        pass: \"uq5sSjK1JVd4qvceuX\",\n+    },\n+});\n+\n+exports.getLogin = (req, res, next) => {\n+    let message = req.flash(\"error\");\n+    if (message.length > 0) {\n+        message = message[0];\n+    } else {\n+        message = null;\n+    }\n+    res.render(\"auth/login\", {\n+        path: \"/login\",\n+        pageTitle: \"Login\",\n+        errorMsg: message,\n+    });\n+};\n+\n+exports.getSignup = (req, res, next) => {\n+    let message = req.flash(\"passNotMatchErr\");\n+    if (message.length > 0) {\n+        message = message[0];\n+    } else {\n+        message = null;\n+    }\n+    res.render(\"auth/signup\", {\n+        path: \"/signup\",\n+        pageTitle: \"Signup\",\n+        errorMsg: message,\n+    });\n+};\n+\n+exports.getReset = (req, res, next) => {\n+    let message = req.flash(\"error\");\n+    if (message.length > 0) {\n+        message = message[0];\n+    } else {\n+        message = null;\n+    }\n+    res.render(\"auth/reset\", {\n+        path: \"/reset\",\n+        pageTitle: \"Reset Password\",\n+        errorMsg: message,\n+    });\n+};\n+\n+exports.getResetPassword = (req, res, next) => {\n+    const token = req.params.token;\n+    User.findOne({ token: token, tokenEXP: { $gt: Date.now() } })\n+        .then((user) => {\n+            if (user) {\n+                let message = req.flash(\"error\");\n+                if (message.length > 0) {\n+                    message = message[0];\n+                } else {\n+                    message = null;\n+                }\n+                res.render(\"auth/new-password\", {\n+                    path: \"/new-password\",\n+                    pageTitle: \"Reset Password\",\n+                    errorMsg: message,\n+                    userId: user._id.toString(),\n+                });\n+            }\n+        })\n+        .catch((err) => console.log(err));\n+};\n+\n+exports.postLogin = (req, res, next) => {\n+    const email = req.body.email;\n+    const password = req.body.password;\n+    User.findOne({ email: email })\n+        .then((user) => {\n+            if (user) {\n+                bcrypt\n+                    .compare(password, user.password)\n+                    .then((doMatch) => {\n+                        if (!doMatch) {\n+                            req.flash(\"error\", \"Enter valid password\");\n+                            return res.redirect(\"/login\");\n+                        }\n+                        req.session.isLoggedIn = true;\n+                        req.session.user = user;\n+                        return req.session.save((err) => {\n+                            console.log(err);\n+                            res.redirect(\"/\");\n+                        });\n+                    })\n+                    .catch((err) => console.log(err));\n+            } else {\n+                req.flash(\"error\", \"Enter valid email\");\n+                res.redirect(\"/login\");\n+            }\n+        })\n+        .catch((err) => console.log(err));\n+};\n+\n+exports.postSignup = (req, res, next) => {\n+    const email = req.body.email;\n+    const password = req.body.password;\n+    const confirmPassword = req.body.confirmPassword;\n+\n+    const error = validatiionResult(req)\n+    transporter\n+        .sendMail({\n+            from: '\"Code marshals\" <davin32@ethereal.email>', // sender address\n+            to: email, // list of receivers\n+            subject: \"Testing mail\", // Subject line\n+            text: \"This is first mail\", // plain text body\n+            html: \"<b>Please consider mail</b>\", // html body\n+        })\n+        .then((data) => {\n+            console.log(\"email sending data\", data.messageId);\n+        })\n+        .catch((err) => console.log(err));\n+\n+    if (password === confirmPassword) {\n+        User.findOne({ email: email })\n+            .then((data) => {\n+                if (data) {\n+                    req.flash(\"error\", \"User already exist.\");\n+                    return res.redirect(\"/login\");\n+                }\n+                return bcrypt\n+                    .hash(password, 12)\n+                    .then((bcryptPassword) => {\n+                        const user = new User({\n+                            email: email,\n+                            password: bcryptPassword,\n+                            cart: { items: [] },\n+                        });\n+                        return user.save();\n+                    })\n+                    .then((data) => {\n+                        res.redirect(\"/login\");\n+                    });\n+            })\n+            .catch((err) => console.log(err));\n+    } else {\n+        req.flash(\"passNotMatchErr\", \"Both password should be same.\");\n+        res.redirect(\"/signup\");\n+    }\n+};\n+\n+exports.postLogout = (req, res, next) => {\n+    req.session.destroy((err) => {\n+        console.log(err);\n+        res.redirect(\"/\");\n+    });\n+};\n+\n+exports.postReset = (req, res, next) => {\n+    crypto.randomBytes(32, (err, buff) => {\n+        if (err) {\n+            console.log(err);\n+            req.flash(\"error\", \"Please try after some ime\");\n+            res.redirect(\"/reset\");\n+        }\n+        const token = buff.toString(\"hex\");\n+\n+        User.findOne({ email: req.body.email })\n+            .then((user) => {\n+                if (!user) {\n+                    req.flash(\"error\", \"This user does not Exist.\");\n+                    return res.redirect(\"/reset\");\n+                }\n+\n+                user.token = token;\n+                user.tokenEXP = Date.now() + 3600000;\n+\n+                return user.save();\n+            })\n+            .then((result) => {\n+                res.redirect(\"/\");\n+                return transporter.sendMail({\n+                    from: '\"Code marshals\" <davin32@ethereal.email>', // sender address\n+                    to: req.body.email, // list of receivers\n+                    subject: \"Reset password\", // Subject line\n+                    text: \"This mail helps you to reset password securely\", // plain text body\n+                    html: `\n+            <p>Click on below link to reset your password</p>\n+            <a href= \"localhost:3000/reset/${token}\">Click</a>\n+            `, // html body\n+                });\n+            })\n+            .then((data) => {\n+                console.log(\"email sending data\", data.messageId);\n+            })\n+            .catch((err) => console.log(err));\n+    });\n+};\n+\n+exports.postResetPassword = (req, res, next) => {\n+    if (req.body.password === req.body.confirmPassword) {\n+        bcrypt\n+            .hash(req.body.password, 12)\n+            .then((bcryptPassword) => {\n+                return User.findById(req.body.userId).then((user) => {\n+                    user.password = bcryptPassword;\n+                    user.token = undefined\n+                    user.tokenEXP = undefined\n+                    return user.save();\n+                });\n+            })\n+            .then((result) => {\n+                req.flash(\"errorMsg\", \"Password changed\");\n+                res.redirect(\"/login\");\n+            })\n+            .catch((err) => console.log(err));\n+    } else {\n+        req.flash(\"passNotMatchErr\", \"Both password must be same.\");\n+        res.redirect(\"/reset/:token\");\n+    }\n+};\n"
                },
                {
                    "date": 1712143910598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n     const email = req.body.email;\n     const password = req.body.password;\n     const confirmPassword = req.body.confirmPassword;\n \n-    const error = validatiionResult(req)\n+    const error = validationResult(req)\n     transporter\n         .sendMail({\n             from: '\"Code marshals\" <davin32@ethereal.email>', // sender address\n             to: email, // list of receivers\n"
                },
                {
                    "date": 1712144050099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n const crypto = require(\"crypto\");\n const bcrypt = require(\"bcryptjs\");\n const nodemailer = require(\"nodemailer\");\n \n+\n const User = require(\"../models/user\");\n \n const transporter = nodemailer.createTransport({\n     host: \"smtp.ethereal.email\",\n"
                },
                {
                    "date": 1712144063782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,226 @@\n+const crypto = require(\"crypto\");\n+const bcrypt = require(\"bcryptjs\");\n+const nodemailer = require(\"nodemailer\");\n+const {validationResult} = require(\"express-validator\")\n+\n+const User = require(\"../models/user\");\n+\n+const transporter = nodemailer.createTransport({\n+    host: \"smtp.ethereal.email\",\n+    port: 587,\n+    auth: {\n+        user: \"catharine.bergstrom30@ethereal.email\",\n+        pass: \"uq5sSjK1JVd4qvceuX\",\n+    },\n+});\n+\n+exports.getLogin = (req, res, next) => {\n+    let message = req.flash(\"error\");\n+    if (message.length > 0) {\n+        message = message[0];\n+    } else {\n+        message = null;\n+    }\n+    res.render(\"auth/login\", {\n+        path: \"/login\",\n+        pageTitle: \"Login\",\n+        errorMsg: message,\n+    });\n+};\n+\n+exports.getSignup = (req, res, next) => {\n+    let message = req.flash(\"passNotMatchErr\");\n+    if (message.length > 0) {\n+        message = message[0];\n+    } else {\n+        message = null;\n+    }\n+    res.render(\"auth/signup\", {\n+        path: \"/signup\",\n+        pageTitle: \"Signup\",\n+        errorMsg: message,\n+    });\n+};\n+\n+exports.getReset = (req, res, next) => {\n+    let message = req.flash(\"error\");\n+    if (message.length > 0) {\n+        message = message[0];\n+    } else {\n+        message = null;\n+    }\n+    res.render(\"auth/reset\", {\n+        path: \"/reset\",\n+        pageTitle: \"Reset Password\",\n+        errorMsg: message,\n+    });\n+};\n+\n+exports.getResetPassword = (req, res, next) => {\n+    const token = req.params.token;\n+    User.findOne({ token: token, tokenEXP: { $gt: Date.now() } })\n+        .then((user) => {\n+            if (user) {\n+                let message = req.flash(\"error\");\n+                if (message.length > 0) {\n+                    message = message[0];\n+                } else {\n+                    message = null;\n+                }\n+                res.render(\"auth/new-password\", {\n+                    path: \"/new-password\",\n+                    pageTitle: \"Reset Password\",\n+                    errorMsg: message,\n+                    userId: user._id.toString(),\n+                });\n+            }\n+        })\n+        .catch((err) => console.log(err));\n+};\n+\n+exports.postLogin = (req, res, next) => {\n+    const email = req.body.email;\n+    const password = req.body.password;\n+    User.findOne({ email: email })\n+        .then((user) => {\n+            if (user) {\n+                bcrypt\n+                    .compare(password, user.password)\n+                    .then((doMatch) => {\n+                        if (!doMatch) {\n+                            req.flash(\"error\", \"Enter valid password\");\n+                            return res.redirect(\"/login\");\n+                        }\n+                        req.session.isLoggedIn = true;\n+                        req.session.user = user;\n+                        return req.session.save((err) => {\n+                            console.log(err);\n+                            res.redirect(\"/\");\n+                        });\n+                    })\n+                    .catch((err) => console.log(err));\n+            } else {\n+                req.flash(\"error\", \"Enter valid email\");\n+                res.redirect(\"/login\");\n+            }\n+        })\n+        .catch((err) => console.log(err));\n+};\n+\n+exports.postSignup = (req, res, next) => {\n+    const email = req.body.email;\n+    const password = req.body.password;\n+    const confirmPassword = req.body.confirmPassword;\n+\n+    const error = validationResult(req)\n+    transporter\n+        .sendMail({\n+            from: '\"Code marshals\" <davin32@ethereal.email>', // sender address\n+            to: email, // list of receivers\n+            subject: \"Testing mail\", // Subject line\n+            text: \"This is first mail\", // plain text body\n+            html: \"<b>Please consider mail</b>\", // html body\n+        })\n+        .then((data) => {\n+            console.log(\"email sending data\", data.messageId);\n+        })\n+        .catch((err) => console.log(err));\n+\n+    if (password === confirmPassword) {\n+        User.findOne({ email: email })\n+            .then((data) => {\n+                if (data) {\n+                    req.flash(\"error\", \"User already exist.\");\n+                    return res.redirect(\"/login\");\n+                }\n+                return bcrypt\n+                    .hash(password, 12)\n+                    .then((bcryptPassword) => {\n+                        const user = new User({\n+                            email: email,\n+                            password: bcryptPassword,\n+                            cart: { items: [] },\n+                        });\n+                        return user.save();\n+                    })\n+                    .then((data) => {\n+                        res.redirect(\"/login\");\n+                    });\n+            })\n+            .catch((err) => console.log(err));\n+    } else {\n+        req.flash(\"passNotMatchErr\", \"Both password should be same.\");\n+        res.redirect(\"/signup\");\n+    }\n+};\n+\n+exports.postLogout = (req, res, next) => {\n+    req.session.destroy((err) => {\n+        console.log(err);\n+        res.redirect(\"/\");\n+    });\n+};\n+\n+exports.postReset = (req, res, next) => {\n+    crypto.randomBytes(32, (err, buff) => {\n+        if (err) {\n+            console.log(err);\n+            req.flash(\"error\", \"Please try after some ime\");\n+            res.redirect(\"/reset\");\n+        }\n+        const token = buff.toString(\"hex\");\n+\n+        User.findOne({ email: req.body.email })\n+            .then((user) => {\n+                if (!user) {\n+                    req.flash(\"error\", \"This user does not Exist.\");\n+                    return res.redirect(\"/reset\");\n+                }\n+\n+                user.token = token;\n+                user.tokenEXP = Date.now() + 3600000;\n+\n+                return user.save();\n+            })\n+            .then((result) => {\n+                res.redirect(\"/\");\n+                return transporter.sendMail({\n+                    from: '\"Code marshals\" <davin32@ethereal.email>', // sender address\n+                    to: req.body.email, // list of receivers\n+                    subject: \"Reset password\", // Subject line\n+                    text: \"This mail helps you to reset password securely\", // plain text body\n+                    html: `\n+            <p>Click on below link to reset your password</p>\n+            <a href= \"localhost:3000/reset/${token}\">Click</a>\n+            `, // html body\n+                });\n+            })\n+            .then((data) => {\n+                console.log(\"email sending data\", data.messageId);\n+            })\n+            .catch((err) => console.log(err));\n+    });\n+};\n+\n+exports.postResetPassword = (req, res, next) => {\n+    if (req.body.password === req.body.confirmPassword) {\n+        bcrypt\n+            .hash(req.body.password, 12)\n+            .then((bcryptPassword) => {\n+                return User.findById(req.body.userId).then((user) => {\n+                    user.password = bcryptPassword;\n+                    user.token = undefined\n+                    user.tokenEXP = undefined\n+                    return user.save();\n+                });\n+            })\n+            .then((result) => {\n+                req.flash(\"errorMsg\", \"Password changed\");\n+                res.redirect(\"/login\");\n+            })\n+            .catch((err) => console.log(err));\n+    } else {\n+        req.flash(\"passNotMatchErr\", \"Both password must be same.\");\n+        res.redirect(\"/reset/:token\");\n+    }\n+};\n"
                },
                {
                    "date": 1712144071973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,226 @@\n+const crypto = require(\"crypto\");\n+const bcrypt = require(\"bcryptjs\");\n+const nodemailer = require(\"nodemailer\");\n+const { validationResult } = require(\"express-validator\");\n+\n+const User = require(\"../models/user\");\n+\n+const transporter = nodemailer.createTransport({\n+    host: \"smtp.ethereal.email\",\n+    port: 587,\n+    auth: {\n+        user: \"catharine.bergstrom30@ethereal.email\",\n+        pass: \"uq5sSjK1JVd4qvceuX\",\n+    },\n+});\n+\n+exports.getLogin = (req, res, next) => {\n+    let message = req.flash(\"error\");\n+    if (message.length > 0) {\n+        message = message[0];\n+    } else {\n+        message = null;\n+    }\n+    res.render(\"auth/login\", {\n+        path: \"/login\",\n+        pageTitle: \"Login\",\n+        errorMsg: message,\n+    });\n+};\n+\n+exports.getSignup = (req, res, next) => {\n+    let message = req.flash(\"passNotMatchErr\");\n+    if (message.length > 0) {\n+        message = message[0];\n+    } else {\n+        message = null;\n+    }\n+    res.render(\"auth/signup\", {\n+        path: \"/signup\",\n+        pageTitle: \"Signup\",\n+        errorMsg: message,\n+    });\n+};\n+\n+exports.getReset = (req, res, next) => {\n+    let message = req.flash(\"error\");\n+    if (message.length > 0) {\n+        message = message[0];\n+    } else {\n+        message = null;\n+    }\n+    res.render(\"auth/reset\", {\n+        path: \"/reset\",\n+        pageTitle: \"Reset Password\",\n+        errorMsg: message,\n+    });\n+};\n+\n+exports.getResetPassword = (req, res, next) => {\n+    const token = req.params.token;\n+    User.findOne({ token: token, tokenEXP: { $gt: Date.now() } })\n+        .then((user) => {\n+            if (user) {\n+                let message = req.flash(\"error\");\n+                if (message.length > 0) {\n+                    message = message[0];\n+                } else {\n+                    message = null;\n+                }\n+                res.render(\"auth/new-password\", {\n+                    path: \"/new-password\",\n+                    pageTitle: \"Reset Password\",\n+                    errorMsg: message,\n+                    userId: user._id.toString(),\n+                });\n+            }\n+        })\n+        .catch((err) => console.log(err));\n+};\n+\n+exports.postLogin = (req, res, next) => {\n+    const email = req.body.email;\n+    const password = req.body.password;\n+    User.findOne({ email: email })\n+        .then((user) => {\n+            if (user) {\n+                bcrypt\n+                    .compare(password, user.password)\n+                    .then((doMatch) => {\n+                        if (!doMatch) {\n+                            req.flash(\"error\", \"Enter valid password\");\n+                            return res.redirect(\"/login\");\n+                        }\n+                        req.session.isLoggedIn = true;\n+                        req.session.user = user;\n+                        return req.session.save((err) => {\n+                            console.log(err);\n+                            res.redirect(\"/\");\n+                        });\n+                    })\n+                    .catch((err) => console.log(err));\n+            } else {\n+                req.flash(\"error\", \"Enter valid email\");\n+                res.redirect(\"/login\");\n+            }\n+        })\n+        .catch((err) => console.log(err));\n+};\n+\n+exports.postSignup = (req, res, next) => {\n+    const email = req.body.email;\n+    const password = req.body.password;\n+    const confirmPassword = req.body.confirmPassword;\n+\n+    const error = validationResult(req);\n+    transporter\n+        .sendMail({\n+            from: '\"Code marshals\" <davin32@ethereal.email>', // sender address\n+            to: email, // list of receivers\n+            subject: \"Testing mail\", // Subject line\n+            text: \"This is first mail\", // plain text body\n+            html: \"<b>Please consider mail</b>\", // html body\n+        })\n+        .then((data) => {\n+            console.log(\"email sending data\", data.messageId);\n+        })\n+        .catch((err) => console.log(err));\n+\n+    if (password === confirmPassword) {\n+        User.findOne({ email: email })\n+            .then((data) => {\n+                if (data) {\n+                    req.flash(\"error\", \"User already exist.\");\n+                    return res.redirect(\"/login\");\n+                }\n+                return bcrypt\n+                    .hash(password, 12)\n+                    .then((bcryptPassword) => {\n+                        const user = new User({\n+                            email: email,\n+                            password: bcryptPassword,\n+                            cart: { items: [] },\n+                        });\n+                        return user.save();\n+                    })\n+                    .then((data) => {\n+                        res.redirect(\"/login\");\n+                    });\n+            })\n+            .catch((err) => console.log(err));\n+    } else {\n+        req.flash(\"passNotMatchErr\", \"Both password should be same.\");\n+        res.redirect(\"/signup\");\n+    }\n+};\n+\n+exports.postLogout = (req, res, next) => {\n+    req.session.destroy((err) => {\n+        console.log(err);\n+        res.redirect(\"/\");\n+    });\n+};\n+\n+exports.postReset = (req, res, next) => {\n+    crypto.randomBytes(32, (err, buff) => {\n+        if (err) {\n+            console.log(err);\n+            req.flash(\"error\", \"Please try after some ime\");\n+            res.redirect(\"/reset\");\n+        }\n+        const token = buff.toString(\"hex\");\n+\n+        User.findOne({ email: req.body.email })\n+            .then((user) => {\n+                if (!user) {\n+                    req.flash(\"error\", \"This user does not Exist.\");\n+                    return res.redirect(\"/reset\");\n+                }\n+\n+                user.token = token;\n+                user.tokenEXP = Date.now() + 3600000;\n+\n+                return user.save();\n+            })\n+            .then((result) => {\n+                res.redirect(\"/\");\n+                return transporter.sendMail({\n+                    from: '\"Code marshals\" <davin32@ethereal.email>', // sender address\n+                    to: req.body.email, // list of receivers\n+                    subject: \"Reset password\", // Subject line\n+                    text: \"This mail helps you to reset password securely\", // plain text body\n+                    html: `\n+            <p>Click on below link to reset your password</p>\n+            <a href= \"localhost:3000/reset/${token}\">Click</a>\n+            `, // html body\n+                });\n+            })\n+            .then((data) => {\n+                console.log(\"email sending data\", data.messageId);\n+            })\n+            .catch((err) => console.log(err));\n+    });\n+};\n+\n+exports.postResetPassword = (req, res, next) => {\n+    if (req.body.password === req.body.confirmPassword) {\n+        bcrypt\n+            .hash(req.body.password, 12)\n+            .then((bcryptPassword) => {\n+                return User.findById(req.body.userId).then((user) => {\n+                    user.password = bcryptPassword;\n+                    user.token = undefined;\n+                    user.tokenEXP = undefined;\n+                    return user.save();\n+                });\n+            })\n+            .then((result) => {\n+                req.flash(\"errorMsg\", \"Password changed\");\n+                res.redirect(\"/login\");\n+            })\n+            .catch((err) => console.log(err));\n+    } else {\n+        req.flash(\"passNotMatchErr\", \"Both password must be same.\");\n+        res.redirect(\"/reset/:token\");\n+    }\n+};\n"
                },
                {
                    "date": 1712144084708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,227 @@\n+const crypto = require(\"crypto\");\n+const bcrypt = require(\"bcryptjs\");\n+const nodemailer = require(\"nodemailer\");\n+const { validationResult } = require(\"express-validator\");\n+\n+const User = require(\"../models/user\");\n+\n+const transporter = nodemailer.createTransport({\n+    host: \"smtp.ethereal.email\",\n+    port: 587,\n+    auth: {\n+        user: \"catharine.bergstrom30@ethereal.email\",\n+        pass: \"uq5sSjK1JVd4qvceuX\",\n+    },\n+});\n+\n+exports.getLogin = (req, res, next) => {\n+    let message = req.flash(\"error\");\n+    if (message.length > 0) {\n+        message = message[0];\n+    } else {\n+        message = null;\n+    }\n+    res.render(\"auth/login\", {\n+        path: \"/login\",\n+        pageTitle: \"Login\",\n+        errorMsg: message,\n+    });\n+};\n+\n+exports.getSignup = (req, res, next) => {\n+    let message = req.flash(\"passNotMatchErr\");\n+    if (message.length > 0) {\n+        message = message[0];\n+    } else {\n+        message = null;\n+    }\n+    res.render(\"auth/signup\", {\n+        path: \"/signup\",\n+        pageTitle: \"Signup\",\n+        errorMsg: message,\n+    });\n+};\n+\n+exports.getReset = (req, res, next) => {\n+    let message = req.flash(\"error\");\n+    if (message.length > 0) {\n+        message = message[0];\n+    } else {\n+        message = null;\n+    }\n+    res.render(\"auth/reset\", {\n+        path: \"/reset\",\n+        pageTitle: \"Reset Password\",\n+        errorMsg: message,\n+    });\n+};\n+\n+exports.getResetPassword = (req, res, next) => {\n+    const token = req.params.token;\n+    User.findOne({ token: token, tokenEXP: { $gt: Date.now() } })\n+        .then((user) => {\n+            if (user) {\n+                let message = req.flash(\"error\");\n+                if (message.length > 0) {\n+                    message = message[0];\n+                } else {\n+                    message = null;\n+                }\n+                res.render(\"auth/new-password\", {\n+                    path: \"/new-password\",\n+                    pageTitle: \"Reset Password\",\n+                    errorMsg: message,\n+                    userId: user._id.toString(),\n+                });\n+            }\n+        })\n+        .catch((err) => console.log(err));\n+};\n+\n+exports.postLogin = (req, res, next) => {\n+    const email = req.body.email;\n+    const password = req.body.password;\n+    User.findOne({ email: email })\n+        .then((user) => {\n+            if (user) {\n+                bcrypt\n+                    .compare(password, user.password)\n+                    .then((doMatch) => {\n+                        if (!doMatch) {\n+                            req.flash(\"error\", \"Enter valid password\");\n+                            return res.redirect(\"/login\");\n+                        }\n+                        req.session.isLoggedIn = true;\n+                        req.session.user = user;\n+                        return req.session.save((err) => {\n+                            console.log(err);\n+                            res.redirect(\"/\");\n+                        });\n+                    })\n+                    .catch((err) => console.log(err));\n+            } else {\n+                req.flash(\"error\", \"Enter valid email\");\n+                res.redirect(\"/login\");\n+            }\n+        })\n+        .catch((err) => console.log(err));\n+};\n+\n+exports.postSignup = (req, res, next) => {\n+    const email = req.body.email;\n+    const password = req.body.password;\n+    const confirmPassword = req.body.confirmPassword;\n+\n+    const error = validationResult(req);\n+    console.log(err);\n+    transporter\n+        .sendMail({\n+            from: '\"Code marshals\" <davin32@ethereal.email>', // sender address\n+            to: email, // list of receivers\n+            subject: \"Testing mail\", // Subject line\n+            text: \"This is first mail\", // plain text body\n+            html: \"<b>Please consider mail</b>\", // html body\n+        })\n+        .then((data) => {\n+            console.log(\"email sending data\", data.messageId);\n+        })\n+        .catch((err) => console.log(err));\n+\n+    if (password === confirmPassword) {\n+        User.findOne({ email: email })\n+            .then((data) => {\n+                if (data) {\n+                    req.flash(\"error\", \"User already exist.\");\n+                    return res.redirect(\"/login\");\n+                }\n+                return bcrypt\n+                    .hash(password, 12)\n+                    .then((bcryptPassword) => {\n+                        const user = new User({\n+                            email: email,\n+                            password: bcryptPassword,\n+                            cart: { items: [] },\n+                        });\n+                        return user.save();\n+                    })\n+                    .then((data) => {\n+                        res.redirect(\"/login\");\n+                    });\n+            })\n+            .catch((err) => console.log(err));\n+    } else {\n+        req.flash(\"passNotMatchErr\", \"Both password should be same.\");\n+        res.redirect(\"/signup\");\n+    }\n+};\n+\n+exports.postLogout = (req, res, next) => {\n+    req.session.destroy((err) => {\n+        console.log(err);\n+        res.redirect(\"/\");\n+    });\n+};\n+\n+exports.postReset = (req, res, next) => {\n+    crypto.randomBytes(32, (err, buff) => {\n+        if (err) {\n+            console.log(err);\n+            req.flash(\"error\", \"Please try after some ime\");\n+            res.redirect(\"/reset\");\n+        }\n+        const token = buff.toString(\"hex\");\n+\n+        User.findOne({ email: req.body.email })\n+            .then((user) => {\n+                if (!user) {\n+                    req.flash(\"error\", \"This user does not Exist.\");\n+                    return res.redirect(\"/reset\");\n+                }\n+\n+                user.token = token;\n+                user.tokenEXP = Date.now() + 3600000;\n+\n+                return user.save();\n+            })\n+            .then((result) => {\n+                res.redirect(\"/\");\n+                return transporter.sendMail({\n+                    from: '\"Code marshals\" <davin32@ethereal.email>', // sender address\n+                    to: req.body.email, // list of receivers\n+                    subject: \"Reset password\", // Subject line\n+                    text: \"This mail helps you to reset password securely\", // plain text body\n+                    html: `\n+            <p>Click on below link to reset your password</p>\n+            <a href= \"localhost:3000/reset/${token}\">Click</a>\n+            `, // html body\n+                });\n+            })\n+            .then((data) => {\n+                console.log(\"email sending data\", data.messageId);\n+            })\n+            .catch((err) => console.log(err));\n+    });\n+};\n+\n+exports.postResetPassword = (req, res, next) => {\n+    if (req.body.password === req.body.confirmPassword) {\n+        bcrypt\n+            .hash(req.body.password, 12)\n+            .then((bcryptPassword) => {\n+                return User.findById(req.body.userId).then((user) => {\n+                    user.password = bcryptPassword;\n+                    user.token = undefined;\n+                    user.tokenEXP = undefined;\n+                    return user.save();\n+                });\n+            })\n+            .then((result) => {\n+                req.flash(\"errorMsg\", \"Password changed\");\n+                res.redirect(\"/login\");\n+            })\n+            .catch((err) => console.log(err));\n+    } else {\n+        req.flash(\"passNotMatchErr\", \"Both password must be same.\");\n+        res.redirect(\"/reset/:token\");\n+    }\n+};\n"
                },
                {
                    "date": 1712144109714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,226 @@\n+const crypto = require(\"crypto\");\n+const bcrypt = require(\"bcryptjs\");\n+const nodemailer = require(\"nodemailer\");\n+const { validationResult } = require(\"express-validator\");\n+\n+const User = require(\"../models/user\");\n+\n+const transporter = nodemailer.createTransport({\n+    host: \"smtp.ethereal.email\",\n+    port: 587,\n+    auth: {\n+        user: \"catharine.bergstrom30@ethereal.email\",\n+        pass: \"uq5sSjK1JVd4qvceuX\",\n+    },\n+});\n+\n+exports.getLogin = (req, res, next) => {\n+    let message = req.flash(\"error\");\n+    if (message.length > 0) {\n+        message = message[0];\n+    } else {\n+        message = null;\n+    }\n+    res.render(\"auth/login\", {\n+        path: \"/login\",\n+        pageTitle: \"Login\",\n+        errorMsg: message,\n+    });\n+};\n+\n+exports.getSignup = (req, res, next) => {\n+    let message = req.flash(\"passNotMatchErr\");\n+    if (message.length > 0) {\n+        message = message[0];\n+    } else {\n+        message = null;\n+    }\n+    res.render(\"auth/signup\", {\n+        path: \"/signup\",\n+        pageTitle: \"Signup\",\n+        errorMsg: message,\n+    });\n+};\n+\n+exports.getReset = (req, res, next) => {\n+    let message = req.flash(\"error\");\n+    if (message.length > 0) {\n+        message = message[0];\n+    } else {\n+        message = null;\n+    }\n+    res.render(\"auth/reset\", {\n+        path: \"/reset\",\n+        pageTitle: \"Reset Password\",\n+        errorMsg: message,\n+    });\n+};\n+\n+exports.getResetPassword = (req, res, next) => {\n+    const token = req.params.token;\n+    User.findOne({ token: token, tokenEXP: { $gt: Date.now() } })\n+        .then((user) => {\n+            if (user) {\n+                let message = req.flash(\"error\");\n+                if (message.length > 0) {\n+                    message = message[0];\n+                } else {\n+                    message = null;\n+                }\n+                res.render(\"auth/new-password\", {\n+                    path: \"/new-password\",\n+                    pageTitle: \"Reset Password\",\n+                    errorMsg: message,\n+                    userId: user._id.toString(),\n+                });\n+            }\n+        })\n+        .catch((err) => console.log(err));\n+};\n+\n+exports.postLogin = (req, res, next) => {\n+    const email = req.body.email;\n+    const password = req.body.password;\n+    User.findOne({ email: email })\n+        .then((user) => {\n+            if (user) {\n+                bcrypt\n+                    .compare(password, user.password)\n+                    .then((doMatch) => {\n+                        if (!doMatch) {\n+                            req.flash(\"error\", \"Enter valid password\");\n+                            return res.redirect(\"/login\");\n+                        }\n+                        req.session.isLoggedIn = true;\n+                        req.session.user = user;\n+                        return req.session.save((err) => {\n+                            console.log(err);\n+                            res.redirect(\"/\");\n+                        });\n+                    })\n+                    .catch((err) => console.log(err));\n+            } else {\n+                req.flash(\"error\", \"Enter valid email\");\n+                res.redirect(\"/login\");\n+            }\n+        })\n+        .catch((err) => console.log(err));\n+};\n+\n+exports.postSignup = (req, res, next) => {\n+    const email = req.body.email;\n+    const password = req.body.password;\n+    const confirmPassword = req.body.confirmPassword;\n+\n+    console.log(error);\n+    transporter\n+        .sendMail({\n+            from: '\"Code marshals\" <davin32@ethereal.email>', // sender address\n+            to: email, // list of receivers\n+            subject: \"Testing mail\", // Subject line\n+            text: \"This is first mail\", // plain text body\n+            html: \"<b>Please consider mail</b>\", // html body\n+        })\n+        .then((data) => {\n+            console.log(\"email sending data\", data.messageId);\n+        })\n+        .catch((err) => console.log(err));\n+\n+    if (password === confirmPassword) {\n+        User.findOne({ email: email })\n+            .then((data) => {\n+                if (data) {\n+                    req.flash(\"error\", \"User already exist.\");\n+                    return res.redirect(\"/login\");\n+                }\n+                return bcrypt\n+                    .hash(password, 12)\n+                    .then((bcryptPassword) => {\n+                        const user = new User({\n+                            email: email,\n+                            password: bcryptPassword,\n+                            cart: { items: [] },\n+                        });\n+                        return user.save();\n+                    })\n+                    .then((data) => {\n+                        res.redirect(\"/login\");\n+                    });\n+            })\n+            .catch((err) => console.log(err));\n+    } else {\n+        req.flash(\"passNotMatchErr\", \"Both password should be same.\");\n+        res.redirect(\"/signup\");\n+    }\n+};\n+\n+exports.postLogout = (req, res, next) => {\n+    req.session.destroy((err) => {\n+        console.log(err);\n+        res.redirect(\"/\");\n+    });\n+};\n+\n+exports.postReset = (req, res, next) => {\n+    crypto.randomBytes(32, (err, buff) => {\n+        if (err) {\n+            console.log(err);\n+            req.flash(\"error\", \"Please try after some ime\");\n+            res.redirect(\"/reset\");\n+        }\n+        const token = buff.toString(\"hex\");\n+\n+        User.findOne({ email: req.body.email })\n+            .then((user) => {\n+                if (!user) {\n+                    req.flash(\"error\", \"This user does not Exist.\");\n+                    return res.redirect(\"/reset\");\n+                }\n+\n+                user.token = token;\n+                user.tokenEXP = Date.now() + 3600000;\n+\n+                return user.save();\n+            })\n+            .then((result) => {\n+                res.redirect(\"/\");\n+                return transporter.sendMail({\n+                    from: '\"Code marshals\" <davin32@ethereal.email>', // sender address\n+                    to: req.body.email, // list of receivers\n+                    subject: \"Reset password\", // Subject line\n+                    text: \"This mail helps you to reset password securely\", // plain text body\n+                    html: `\n+            <p>Click on below link to reset your password</p>\n+            <a href= \"localhost:3000/reset/${token}\">Click</a>\n+            `, // html body\n+                });\n+            })\n+            .then((data) => {\n+                console.log(\"email sending data\", data.messageId);\n+            })\n+            .catch((err) => console.log(err));\n+    });\n+};\n+\n+exports.postResetPassword = (req, res, next) => {\n+    if (req.body.password === req.body.confirmPassword) {\n+        bcrypt\n+            .hash(req.body.password, 12)\n+            .then((bcryptPassword) => {\n+                return User.findById(req.body.userId).then((user) => {\n+                    user.password = bcryptPassword;\n+                    user.token = undefined;\n+                    user.tokenEXP = undefined;\n+                    return user.save();\n+                });\n+            })\n+            .then((result) => {\n+                req.flash(\"errorMsg\", \"Password changed\");\n+                res.redirect(\"/login\");\n+            })\n+            .catch((err) => console.log(err));\n+    } else {\n+        req.flash(\"passNotMatchErr\", \"Both password must be same.\");\n+        res.redirect(\"/reset/:token\");\n+    }\n+};\n"
                },
                {
                    "date": 1712144114956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,227 @@\n+const crypto = require(\"crypto\");\n+const bcrypt = require(\"bcryptjs\");\n+const nodemailer = require(\"nodemailer\");\n+const { validationResult } = require(\"express-validator\");\n+\n+const User = require(\"../models/user\");\n+\n+const transporter = nodemailer.createTransport({\n+    host: \"smtp.ethereal.email\",\n+    port: 587,\n+    auth: {\n+        user: \"catharine.bergstrom30@ethereal.email\",\n+        pass: \"uq5sSjK1JVd4qvceuX\",\n+    },\n+});\n+\n+exports.getLogin = (req, res, next) => {\n+    let message = req.flash(\"error\");\n+    if (message.length > 0) {\n+        message = message[0];\n+    } else {\n+        message = null;\n+    }\n+    res.render(\"auth/login\", {\n+        path: \"/login\",\n+        pageTitle: \"Login\",\n+        errorMsg: message,\n+    });\n+};\n+\n+exports.getSignup = (req, res, next) => {\n+    let message = req.flash(\"passNotMatchErr\");\n+    if (message.length > 0) {\n+        message = message[0];\n+    } else {\n+        message = null;\n+    }\n+    res.render(\"auth/signup\", {\n+        path: \"/signup\",\n+        pageTitle: \"Signup\",\n+        errorMsg: message,\n+    });\n+};\n+\n+exports.getReset = (req, res, next) => {\n+    let message = req.flash(\"error\");\n+    if (message.length > 0) {\n+        message = message[0];\n+    } else {\n+        message = null;\n+    }\n+    res.render(\"auth/reset\", {\n+        path: \"/reset\",\n+        pageTitle: \"Reset Password\",\n+        errorMsg: message,\n+    });\n+};\n+\n+exports.getResetPassword = (req, res, next) => {\n+    const token = req.params.token;\n+    User.findOne({ token: token, tokenEXP: { $gt: Date.now() } })\n+        .then((user) => {\n+            if (user) {\n+                let message = req.flash(\"error\");\n+                if (message.length > 0) {\n+                    message = message[0];\n+                } else {\n+                    message = null;\n+                }\n+                res.render(\"auth/new-password\", {\n+                    path: \"/new-password\",\n+                    pageTitle: \"Reset Password\",\n+                    errorMsg: message,\n+                    userId: user._id.toString(),\n+                });\n+            }\n+        })\n+        .catch((err) => console.log(err));\n+};\n+\n+exports.postLogin = (req, res, next) => {\n+    const email = req.body.email;\n+    const password = req.body.password;\n+    User.findOne({ email: email })\n+        .then((user) => {\n+            if (user) {\n+                bcrypt\n+                    .compare(password, user.password)\n+                    .then((doMatch) => {\n+                        if (!doMatch) {\n+                            req.flash(\"error\", \"Enter valid password\");\n+                            return res.redirect(\"/login\");\n+                        }\n+                        req.session.isLoggedIn = true;\n+                        req.session.user = user;\n+                        return req.session.save((err) => {\n+                            console.log(err);\n+                            res.redirect(\"/\");\n+                        });\n+                    })\n+                    .catch((err) => console.log(err));\n+            } else {\n+                req.flash(\"error\", \"Enter valid email\");\n+                res.redirect(\"/login\");\n+            }\n+        })\n+        .catch((err) => console.log(err));\n+};\n+\n+exports.postSignup = (req, res, next) => {\n+    const email = req.body.email;\n+    const password = req.body.password;\n+    const confirmPassword = req.body.confirmPassword;\n+\n+    const error = validationResult(req);\n+    console.log(error);\n+    transporter\n+        .sendMail({\n+            from: '\"Code marshals\" <davin32@ethereal.email>', // sender address\n+            to: email, // list of receivers\n+            subject: \"Testing mail\", // Subject line\n+            text: \"This is first mail\", // plain text body\n+            html: \"<b>Please consider mail</b>\", // html body\n+        })\n+        .then((data) => {\n+            console.log(\"email sending data\", data.messageId);\n+        })\n+        .catch((err) => console.log(err));\n+\n+    if (password === confirmPassword) {\n+        User.findOne({ email: email })\n+            .then((data) => {\n+                if (data) {\n+                    req.flash(\"error\", \"User already exist.\");\n+                    return res.redirect(\"/login\");\n+                }\n+                return bcrypt\n+                    .hash(password, 12)\n+                    .then((bcryptPassword) => {\n+                        const user = new User({\n+                            email: email,\n+                            password: bcryptPassword,\n+                            cart: { items: [] },\n+                        });\n+                        return user.save();\n+                    })\n+                    .then((data) => {\n+                        res.redirect(\"/login\");\n+                    });\n+            })\n+            .catch((err) => console.log(err));\n+    } else {\n+        req.flash(\"passNotMatchErr\", \"Both password should be same.\");\n+        res.redirect(\"/signup\");\n+    }\n+};\n+\n+exports.postLogout = (req, res, next) => {\n+    req.session.destroy((err) => {\n+        console.log(err);\n+        res.redirect(\"/\");\n+    });\n+};\n+\n+exports.postReset = (req, res, next) => {\n+    crypto.randomBytes(32, (err, buff) => {\n+        if (err) {\n+            console.log(err);\n+            req.flash(\"error\", \"Please try after some ime\");\n+            res.redirect(\"/reset\");\n+        }\n+        const token = buff.toString(\"hex\");\n+\n+        User.findOne({ email: req.body.email })\n+            .then((user) => {\n+                if (!user) {\n+                    req.flash(\"error\", \"This user does not Exist.\");\n+                    return res.redirect(\"/reset\");\n+                }\n+\n+                user.token = token;\n+                user.tokenEXP = Date.now() + 3600000;\n+\n+                return user.save();\n+            })\n+            .then((result) => {\n+                res.redirect(\"/\");\n+                return transporter.sendMail({\n+                    from: '\"Code marshals\" <davin32@ethereal.email>', // sender address\n+                    to: req.body.email, // list of receivers\n+                    subject: \"Reset password\", // Subject line\n+                    text: \"This mail helps you to reset password securely\", // plain text body\n+                    html: `\n+            <p>Click on below link to reset your password</p>\n+            <a href= \"localhost:3000/reset/${token}\">Click</a>\n+            `, // html body\n+                });\n+            })\n+            .then((data) => {\n+                console.log(\"email sending data\", data.messageId);\n+            })\n+            .catch((err) => console.log(err));\n+    });\n+};\n+\n+exports.postResetPassword = (req, res, next) => {\n+    if (req.body.password === req.body.confirmPassword) {\n+        bcrypt\n+            .hash(req.body.password, 12)\n+            .then((bcryptPassword) => {\n+                return User.findById(req.body.userId).then((user) => {\n+                    user.password = bcryptPassword;\n+                    user.token = undefined;\n+                    user.tokenEXP = undefined;\n+                    return user.save();\n+                });\n+            })\n+            .then((result) => {\n+                req.flash(\"errorMsg\", \"Password changed\");\n+                res.redirect(\"/login\");\n+            })\n+            .catch((err) => console.log(err));\n+    } else {\n+        req.flash(\"passNotMatchErr\", \"Both password must be same.\");\n+        res.redirect(\"/reset/:token\");\n+    }\n+};\n"
                },
                {
                    "date": 1712144124377,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,226 @@\n+const crypto = require(\"crypto\");\n+const bcrypt = require(\"bcryptjs\");\n+const nodemailer = require(\"nodemailer\");\n+const { validationResult } = require(\"express-validator\");\n+\n+const User = require(\"../models/user\");\n+\n+const transporter = nodemailer.createTransport({\n+    host: \"smtp.ethereal.email\",\n+    port: 587,\n+    auth: {\n+        user: \"catharine.bergstrom30@ethereal.email\",\n+        pass: \"uq5sSjK1JVd4qvceuX\",\n+    },\n+});\n+\n+exports.getLogin = (req, res, next) => {\n+    let message = req.flash(\"error\");\n+    if (message.length > 0) {\n+        message = message[0];\n+    } else {\n+        message = null;\n+    }\n+    res.render(\"auth/login\", {\n+        path: \"/login\",\n+        pageTitle: \"Login\",\n+        errorMsg: message,\n+    });\n+};\n+\n+exports.getSignup = (req, res, next) => {\n+    let message = req.flash(\"passNotMatchErr\");\n+    if (message.length > 0) {\n+        message = message[0];\n+    } else {\n+        message = null;\n+    }\n+    res.render(\"auth/signup\", {\n+        path: \"/signup\",\n+        pageTitle: \"Signup\",\n+        errorMsg: message,\n+    });\n+};\n+\n+exports.getReset = (req, res, next) => {\n+    let message = req.flash(\"error\");\n+    if (message.length > 0) {\n+        message = message[0];\n+    } else {\n+        message = null;\n+    }\n+    res.render(\"auth/reset\", {\n+        path: \"/reset\",\n+        pageTitle: \"Reset Password\",\n+        errorMsg: message,\n+    });\n+};\n+\n+exports.getResetPassword = (req, res, next) => {\n+    const token = req.params.token;\n+    User.findOne({ token: token, tokenEXP: { $gt: Date.now() } })\n+        .then((user) => {\n+            if (user) {\n+                let message = req.flash(\"error\");\n+                if (message.length > 0) {\n+                    message = message[0];\n+                } else {\n+                    message = null;\n+                }\n+                res.render(\"auth/new-password\", {\n+                    path: \"/new-password\",\n+                    pageTitle: \"Reset Password\",\n+                    errorMsg: message,\n+                    userId: user._id.toString(),\n+                });\n+            }\n+        })\n+        .catch((err) => console.log(err));\n+};\n+\n+exports.postLogin = (req, res, next) => {\n+    const email = req.body.email;\n+    const password = req.body.password;\n+    User.findOne({ email: email })\n+        .then((user) => {\n+            if (user) {\n+                bcrypt\n+                    .compare(password, user.password)\n+                    .then((doMatch) => {\n+                        if (!doMatch) {\n+                            req.flash(\"error\", \"Enter valid password\");\n+                            return res.redirect(\"/login\");\n+                        }\n+                        req.session.isLoggedIn = true;\n+                        req.session.user = user;\n+                        return req.session.save((err) => {\n+                            console.log(err);\n+                            res.redirect(\"/\");\n+                        });\n+                    })\n+                    .catch((err) => console.log(err));\n+            } else {\n+                req.flash(\"error\", \"Enter valid email\");\n+                res.redirect(\"/login\");\n+            }\n+        })\n+        .catch((err) => console.log(err));\n+};\n+\n+exports.postSignup = (req, res, next) => {\n+    const email = req.body.email;\n+    const password = req.body.password;\n+    const confirmPassword = req.body.confirmPassword;\n+    transporter\n+        .sendMail({\n+            from: '\"Code marshals\" <davin32@ethereal.email>', // sender address\n+            to: email, // list of receivers\n+            subject: \"Testing mail\", // Subject line\n+            text: \"This is first mail\", // plain text body\n+            html: \"<b>Please consider mail</b>\", // html body\n+        })\n+        .then((data) => {\n+            console.log(\"email sending data\", data.messageId);\n+        })\n+        .catch((err) => console.log(err));\n+\n+    if (password === confirmPassword) {\n+        const error = validationResult(req);\n+    console.log(error);\n+        User.findOne({ email: email })\n+            .then((data) => {\n+                if (data) {\n+                    req.flash(\"error\", \"User already exist.\");\n+                    return res.redirect(\"/login\");\n+                }\n+                return bcrypt\n+                    .hash(password, 12)\n+                    .then((bcryptPassword) => {\n+                        const user = new User({\n+                            email: email,\n+                            password: bcryptPassword,\n+                            cart: { items: [] },\n+                        });\n+                        return user.save();\n+                    })\n+                    .then((data) => {\n+                        res.redirect(\"/login\");\n+                    });\n+            })\n+            .catch((err) => console.log(err));\n+    } else {\n+        req.flash(\"passNotMatchErr\", \"Both password should be same.\");\n+        res.redirect(\"/signup\");\n+    }\n+};\n+\n+exports.postLogout = (req, res, next) => {\n+    req.session.destroy((err) => {\n+        console.log(err);\n+        res.redirect(\"/\");\n+    });\n+};\n+\n+exports.postReset = (req, res, next) => {\n+    crypto.randomBytes(32, (err, buff) => {\n+        if (err) {\n+            console.log(err);\n+            req.flash(\"error\", \"Please try after some ime\");\n+            res.redirect(\"/reset\");\n+        }\n+        const token = buff.toString(\"hex\");\n+\n+        User.findOne({ email: req.body.email })\n+            .then((user) => {\n+                if (!user) {\n+                    req.flash(\"error\", \"This user does not Exist.\");\n+                    return res.redirect(\"/reset\");\n+                }\n+\n+                user.token = token;\n+                user.tokenEXP = Date.now() + 3600000;\n+\n+                return user.save();\n+            })\n+            .then((result) => {\n+                res.redirect(\"/\");\n+                return transporter.sendMail({\n+                    from: '\"Code marshals\" <davin32@ethereal.email>', // sender address\n+                    to: req.body.email, // list of receivers\n+                    subject: \"Reset password\", // Subject line\n+                    text: \"This mail helps you to reset password securely\", // plain text body\n+                    html: `\n+            <p>Click on below link to reset your password</p>\n+            <a href= \"localhost:3000/reset/${token}\">Click</a>\n+            `, // html body\n+                });\n+            })\n+            .then((data) => {\n+                console.log(\"email sending data\", data.messageId);\n+            })\n+            .catch((err) => console.log(err));\n+    });\n+};\n+\n+exports.postResetPassword = (req, res, next) => {\n+    if (req.body.password === req.body.confirmPassword) {\n+        bcrypt\n+            .hash(req.body.password, 12)\n+            .then((bcryptPassword) => {\n+                return User.findById(req.body.userId).then((user) => {\n+                    user.password = bcryptPassword;\n+                    user.token = undefined;\n+                    user.tokenEXP = undefined;\n+                    return user.save();\n+                });\n+            })\n+            .then((result) => {\n+                req.flash(\"errorMsg\", \"Password changed\");\n+                res.redirect(\"/login\");\n+            })\n+            .catch((err) => console.log(err));\n+    } else {\n+        req.flash(\"passNotMatchErr\", \"Both password must be same.\");\n+        res.redirect(\"/reset/:token\");\n+    }\n+};\n"
                },
                {
                    "date": 1712144251028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,9 @@\n         .catch((err) => console.log(err));\n \n     if (password === confirmPassword) {\n         const error = validationResult(req);\n-        console.log(error);\n+        if(e)\n         User.findOne({ email: email })\n             .then((data) => {\n                 if (data) {\n                     req.flash(\"error\", \"User already exist.\");\n"
                },
                {
                    "date": 1712144256725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,9 @@\n         .catch((err) => console.log(err));\n \n     if (password === confirmPassword) {\n         const error = validationResult(req);\n-        if(error.)\n+        if(error.isEmpty())\n         User.findOne({ email: email })\n             .then((data) => {\n                 if (data) {\n                     req.flash(\"error\", \"User already exist.\");\n"
                }
            ],
            "date": 1712143853259,
            "name": "Commit-0",
            "content": "const crypto = require(\"crypto\");\nconst bcrypt = require(\"bcryptjs\");\nconst nodemailer = require(\"nodemailer\");\n\nconst User = require(\"../models/user\");\n\nconst transporter = nodemailer.createTransport({\n    host: \"smtp.ethereal.email\",\n    port: 587,\n    auth: {\n        user: \"catharine.bergstrom30@ethereal.email\",\n        pass: \"uq5sSjK1JVd4qvceuX\",\n    },\n});\n\nexports.getLogin = (req, res, next) => {\n    let message = req.flash(\"error\");\n    if (message.length > 0) {\n        message = message[0];\n    } else {\n        message = null;\n    }\n    res.render(\"auth/login\", {\n        path: \"/login\",\n        pageTitle: \"Login\",\n        errorMsg: message,\n    });\n};\n\nexports.getSignup = (req, res, next) => {\n    let message = req.flash(\"passNotMatchErr\");\n    if (message.length > 0) {\n        message = message[0];\n    } else {\n        message = null;\n    }\n    res.render(\"auth/signup\", {\n        path: \"/signup\",\n        pageTitle: \"Signup\",\n        errorMsg: message,\n    });\n};\n\nexports.getReset = (req, res, next) => {\n    let message = req.flash(\"error\");\n    if (message.length > 0) {\n        message = message[0];\n    } else {\n        message = null;\n    }\n    res.render(\"auth/reset\", {\n        path: \"/reset\",\n        pageTitle: \"Reset Password\",\n        errorMsg: message,\n    });\n};\n\nexports.getResetPassword = (req, res, next) => {\n    const token = req.params.token;\n    User.findOne({ token: token, tokenEXP: { $gt: Date.now() } })\n        .then((user) => {\n            if (user) {\n                let message = req.flash(\"error\");\n                if (message.length > 0) {\n                    message = message[0];\n                } else {\n                    message = null;\n                }\n                res.render(\"auth/new-password\", {\n                    path: \"/new-password\",\n                    pageTitle: \"Reset Password\",\n                    errorMsg: message,\n                    userId: user._id.toString(),\n                });\n            }\n        })\n        .catch((err) => console.log(err));\n};\n\nexports.postLogin = (req, res, next) => {\n    const email = req.body.email;\n    const password = req.body.password;\n    User.findOne({ email: email })\n        .then((user) => {\n            if (user) {\n                bcrypt\n                    .compare(password, user.password)\n                    .then((doMatch) => {\n                        if (!doMatch) {\n                            req.flash(\"error\", \"Enter valid password\");\n                            return res.redirect(\"/login\");\n                        }\n                        req.session.isLoggedIn = true;\n                        req.session.user = user;\n                        return req.session.save((err) => {\n                            console.log(err);\n                            res.redirect(\"/\");\n                        });\n                    })\n                    .catch((err) => console.log(err));\n            } else {\n                req.flash(\"error\", \"Enter valid email\");\n                res.redirect(\"/login\");\n            }\n        })\n        .catch((err) => console.log(err));\n};\n\nexports.postSignup = (req, res, next) => {\n    const email = req.body.email;\n    const password = req.body.password;\n    const confirmPassword = req.body.confirmPassword;\n\n    const error = \n    transporter\n        .sendMail({\n            from: '\"Code marshals\" <davin32@ethereal.email>', // sender address\n            to: email, // list of receivers\n            subject: \"Testing mail\", // Subject line\n            text: \"This is first mail\", // plain text body\n            html: \"<b>Please consider mail</b>\", // html body\n        })\n        .then((data) => {\n            console.log(\"email sending data\", data.messageId);\n        })\n        .catch((err) => console.log(err));\n\n    if (password === confirmPassword) {\n        User.findOne({ email: email })\n            .then((data) => {\n                if (data) {\n                    req.flash(\"error\", \"User already exist.\");\n                    return res.redirect(\"/login\");\n                }\n                return bcrypt\n                    .hash(password, 12)\n                    .then((bcryptPassword) => {\n                        const user = new User({\n                            email: email,\n                            password: bcryptPassword,\n                            cart: { items: [] },\n                        });\n                        return user.save();\n                    })\n                    .then((data) => {\n                        res.redirect(\"/login\");\n                    });\n            })\n            .catch((err) => console.log(err));\n    } else {\n        req.flash(\"passNotMatchErr\", \"Both password should be same.\");\n        res.redirect(\"/signup\");\n    }\n};\n\nexports.postLogout = (req, res, next) => {\n    req.session.destroy((err) => {\n        console.log(err);\n        res.redirect(\"/\");\n    });\n};\n\nexports.postReset = (req, res, next) => {\n    crypto.randomBytes(32, (err, buff) => {\n        if (err) {\n            console.log(err);\n            req.flash(\"error\", \"Please try after some ime\");\n            res.redirect(\"/reset\");\n        }\n        const token = buff.toString(\"hex\");\n\n        User.findOne({ email: req.body.email })\n            .then((user) => {\n                if (!user) {\n                    req.flash(\"error\", \"This user does not Exist.\");\n                    return res.redirect(\"/reset\");\n                }\n\n                user.token = token;\n                user.tokenEXP = Date.now() + 3600000;\n\n                return user.save();\n            })\n            .then((result) => {\n                res.redirect(\"/\");\n                return transporter.sendMail({\n                    from: '\"Code marshals\" <davin32@ethereal.email>', // sender address\n                    to: req.body.email, // list of receivers\n                    subject: \"Reset password\", // Subject line\n                    text: \"This mail helps you to reset password securely\", // plain text body\n                    html: `\n            <p>Click on below link to reset your password</p>\n            <a href= \"localhost:3000/reset/${token}\">Click</a>\n            `, // html body\n                });\n            })\n            .then((data) => {\n                console.log(\"email sending data\", data.messageId);\n            })\n            .catch((err) => console.log(err));\n    });\n};\n\nexports.postResetPassword = (req, res, next) => {\n    if (req.body.password === req.body.confirmPassword) {\n        bcrypt\n            .hash(req.body.password, 12)\n            .then((bcryptPassword) => {\n                return User.findById(req.body.userId).then((user) => {\n                    user.password = bcryptPassword;\n                    user.token = undefined\n                    user.tokenEXP = undefined\n                    return user.save();\n                });\n            })\n            .then((result) => {\n                req.flash(\"errorMsg\", \"Password changed\");\n                res.redirect(\"/login\");\n            })\n            .catch((err) => console.log(err));\n    } else {\n        req.flash(\"passNotMatchErr\", \"Both password must be same.\");\n        res.redirect(\"/reset/:token\");\n    }\n};\n"
        }
    ]
}